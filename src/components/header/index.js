import React from "react";import classnames from "classnames";// import PropTypes from 'prop-types';import Burger from "./burger";import './header.scss'    /*    * @constructor    * @param{*} - Не принимает параметры    * @return{node} - Возращает шапку проекта    * @description Компонент шапки проекта    * */class Header extends React.Component {    constructor() {        super();        this.state = {            menuPoint: ['Главная', 'Инструменты', 'Обучение'],            widthWindow: window.innerWidth,            burgerActive: false        }    }    // Обновление размера экрана для появления бургер меню    updateWidthWindow() {        this.setState(() => {            return {                widthWindow: window.innerWidth            }        })    }    // переключение пункта меню    handledToggleBurger() {        this.setState(prevState =>            ({                burgerActive: !prevState.burgerActive            })        )    }    // После отрисовки всех компонентов проверяем изминение размеров экрана    // вызываем функцию обновления экрана    componentDidMount() {        window.addEventListener('resize', this.updateWidthWindow.bind(this))    }    render() {        return (            <>                <header className={classnames('header', {'header_active': this.state.burgerActive})}>                    <div className="header__title">                        <a href="/">Virtual                            <span className="header__title_color">Cop</span>                        </a>                    </div>                    <nav className="header__nav">                        {this.state.menuPoint.map((val, index) => {                            return <a href="#" className="header__nav_link" key={index}>{val}</a>                        })}                        <span className="header__nav_icon">                            <svg width="45" height="42" viewBox="0 0 45 42" fill="none" xmlns="http://www.w3.org/2000/svg">                                <path d="M25.1772 0C24.8792 0.000267079 24.5766 0.0296718 24.2743 0.0890226L22.547 0.34631L21.2156 0.0890226H21.2097C18.7943 -0.384537 16.3995 1.1078 15.8021 3.4707L14.9948 6.67072L16.1407 7.42347H16.1484C18.3167 8.8118 20.1561 9.44637 22.1491 9.44717C24.1442 9.448 26.3649 8.78963 29.1904 7.37429L30.3343 6.77477L29.6896 3.51988C29.6875 3.50349 29.6849 3.48714 29.6818 3.47088C29.1585 1.40162 27.2629 -0.00186648 25.177 0.000181124L25.1772 0ZM14.4919 8.66018L13.8893 11.047C12.4652 11.126 11.1137 11.3607 9.84936 11.76C9.25528 11.9479 8.78772 12.6393 8.78772 13.256V13.2958C8.78772 13.9126 9.19085 14.7205 9.74607 14.9999C10.6415 15.4505 11.6511 15.7379 12.5618 15.9436C15.0987 16.5029 18.6198 16.859 22.4953 16.859C26.4903 16.859 30.1092 16.4755 32.6603 15.887C33.5805 15.6166 34.4701 15.3458 35.2408 14.9791C35.802 14.712 36.2106 13.9108 36.2106 13.294V13.2486C36.2106 12.6318 35.7466 11.9295 35.1528 11.7412C33.8297 11.3217 32.4189 11.1156 31.1817 11.0452L30.7283 8.76053L30.0875 9.09724C30.0824 9.09926 30.0773 9.10128 30.0722 9.10322C27.0979 10.5931 24.5784 11.385 22.1491 11.384C19.7198 11.3829 17.4528 10.5675 15.0791 9.04643C15.0766 9.04447 15.074 9.04245 15.0715 9.04046L14.4919 8.66018ZM13.0974 18.007C13.3638 20.3781 14.1933 23.2193 15.8022 25.6157C17.6822 28.4159 20.1779 30.3761 22.4953 30.3761C23.0747 30.3761 23.6658 30.2538 24.2552 30.0261C21.5344 29.1273 19.561 26.5852 19.561 23.5996C19.561 21.7143 20.3475 20.0073 21.6116 18.7768C18.4061 18.7311 15.4832 18.4551 13.0974 18.007ZM26.4148 18.7598C23.6987 18.7598 21.5198 20.9141 21.5198 23.5996C21.5198 26.285 23.6987 28.4394 26.4148 28.4394C27.1761 28.4394 27.8925 28.2702 28.5323 27.9665C29.5402 27.4883 30.3584 26.6781 30.8393 25.68C31.1425 25.0505 31.3098 24.3471 31.3098 23.5996C31.3098 20.9141 29.1309 18.7598 26.4148 18.7598ZM14.249 26.7902L9.96796 28.9387C9.96543 28.9407 9.96289 28.9426 9.96033 28.9446C9.51678 29.1639 9.51677 29.6559 9.96033 29.8751L13.1414 31.4467C13.2914 31.5202 13.4198 31.6306 13.5145 31.7671C13.6091 31.9037 13.6667 32.0619 13.6818 32.2267C13.697 32.3916 13.6692 32.5575 13.601 32.7087C13.5329 32.8599 13.4267 32.9913 13.2926 33.0903L11.4715 34.435C11.0142 34.7743 11.0536 35.384 11.5499 35.6644C11.5525 35.6663 11.555 35.6683 11.5576 35.6702L21.2596 41.2591C20.9441 40.1106 20.4826 38.6102 19.9723 37.0443C18.9446 33.8906 17.9027 30.9287 17.7897 30.6082C16.4484 29.6163 15.2569 28.2717 14.249 26.7897L14.249 26.7902ZM32.0826 27.4143C31.9795 27.5636 31.8603 27.6994 31.746 27.8398L33.502 30.6825L35.1337 29.8767C35.5772 29.6574 35.5772 29.1655 35.1337 28.9463C35.131 28.9443 35.1284 28.9423 35.1259 28.9403L32.0826 27.4143ZM30.2864 29.1903C30.0093 29.3772 29.7186 29.5467 29.4142 29.6933L31.1205 32.4565L31.9889 31.9553L30.2864 29.1903ZM27.5051 30.3174L27.3483 30.4916C27.2874 30.6643 26.1757 33.8066 25.1198 37.0468C24.6103 38.6103 24.15 40.106 23.8344 41.2568L29.506 37.9923C29.1053 37.7801 28.7532 37.4667 28.5113 37.0523L28.4253 36.9031C28.0778 36.3081 28.0184 35.6776 28.1058 35.1309C28.1932 34.5842 28.3372 34.0615 28.9819 33.6935L29.4353 33.4345L27.5051 30.3174ZM8.64617 31.3198C6.45694 31.5908 4.62417 32.3645 3.22127 33.665C1.18275 35.5546 0.156207 38.4218 0 42H18.6524L10.582 37.3455C8.92448 36.409 8.77164 34.0239 10.2989 32.8914L10.8498 32.4848L9.08421 31.6054C8.92146 31.525 8.77911 31.427 8.64617 31.3199L8.64617 31.3198ZM36.729 31.3782C36.8937 31.5352 37.0456 31.7087 37.1651 31.9135L37.2512 32.0628C37.526 32.5334 37.6212 33.0592 37.5687 33.5663C38.1291 33.7559 38.6286 34.1249 38.944 34.6652L39.0301 34.8144C39.725 36.0045 39.3022 37.5525 38.0985 38.2396L33.7525 40.7191C32.5489 41.4061 30.9774 40.9939 30.2826 39.8037L30.2747 39.7888L26.4414 41.9997H45C44.8448 38.4215 43.823 35.5544 41.7845 33.6648C40.4632 32.4401 38.7537 31.6882 36.7288 31.3782H36.729ZM24.7831 31.9154C24.0494 32.1697 23.2858 32.3126 22.4953 32.3126C21.7437 32.3126 21.0184 32.1805 20.3185 31.9495C20.749 33.1931 21.253 34.6537 21.8392 36.4527C22.088 37.216 22.3256 37.9657 22.547 38.6825C22.7686 37.9657 23.006 37.216 23.2547 36.4527C23.8455 34.6399 24.3528 33.1632 24.7831 31.9155V31.9154ZM34.9003 32.5944C34.8252 32.6063 34.7502 32.6274 34.6784 32.6701L30.1086 35.28C30.0978 35.2949 30.0507 35.3503 30.0378 35.4316C30.012 35.5933 30.0411 35.7969 30.1239 35.9385L30.2099 36.0877C30.3756 36.3714 30.711 36.4598 30.998 36.2955L35.344 33.8141C35.6309 33.6506 35.7258 33.311 35.5602 33.0274L35.4741 32.8856C35.4741 32.8836 35.4741 32.8816 35.4741 32.8796C35.3499 32.6668 35.1255 32.5644 34.9003 32.5958L34.9003 32.5944ZM36.6773 35.3462C36.6029 35.3581 36.5291 35.3827 36.4573 35.4236L31.8818 38.0336C31.8677 38.0515 31.8217 38.1024 31.8091 38.1811C31.7833 38.3428 31.8124 38.5482 31.8951 38.6899L31.9812 38.8317C32.1468 39.1157 32.4823 39.2113 32.7693 39.0471L37.121 36.5657C37.4079 36.4022 37.4971 36.0627 37.3314 35.779L37.2454 35.6298C37.1211 35.4173 36.9004 35.3146 36.6772 35.346L36.6773 35.3462ZM31.8818 38.0337C31.8965 38.0159 31.8758 38.0367 31.7364 38.1168L31.8818 38.0337Z" fill="white"/>                            </svg>                        </span>                    </nav>                </header>                {this.state.widthWindow <= 770                    ? <Burger burgerActive={this.state.burgerActive}                              handledToggleBurger={this.handledToggleBurger.bind(this)}/>                    : null                }            </>        )    }}export default Header